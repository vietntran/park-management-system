generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id                  String                @id @default(uuid())
  email               String                @unique
  phone               String?
  name                String
  phoneVerified       Boolean               @default(false) @map("phone_verified")
  createdAt           DateTime              @default(now()) @map("created_at")
  password            String?
  isProfileComplete   Boolean               @default(false) @map("is_profile_complete")
  emailVerified       DateTime?             @map("email_verified")
  accounts            Account[]
  address             Address?
  transfersFrom       ReservationTransfer[] @relation("FromUser")
  transfersTo         ReservationTransfer[] @relation("ToUser")
  reservationUsers    ReservationUser[]
  primaryReservations Reservation[]
  sessions            Session[]

  @@map("users")
}

model Address {
  id        String   @id @default(uuid())
  userId    String   @unique @map("user_id")
  line1     String
  line2     String?
  city      String
  state     String
  zipCode   String   @map("zip_code")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

model Reservation {
  id               String                @id @default(uuid())
  primaryUserId    String                @map("primary_user_id")
  reservationDate  DateTime              @map("reservation_date")
  createdAt        DateTime              @default(now()) @map("created_at")
  canTransfer      Boolean               @default(true) @map("can_transfer")
  status           ReservationStatus     @default(ACTIVE)
  transfers        ReservationTransfer[]
  reservationUsers ReservationUser[]
  primaryUser      User                  @relation(fields: [primaryUserId], references: [id])
  dateCapacity     DateCapacity          @relation(fields: [reservationDate], references: [date])

  @@index([primaryUserId, reservationDate])
  @@map("reservations")
}

model ReservationUser {
  reservationId String                @map("reservation_id")
  userId        String                @map("user_id")
  isPrimary     Boolean               @default(false) @map("is_primary")
  addedAt       DateTime              @default(now()) @map("added_at")
  cancelledAt   DateTime?             @map("cancelled_at")
  status        ReservationUserStatus @default(ACTIVE)
  reservation   Reservation           @relation(fields: [reservationId], references: [id])
  user          User                  @relation(fields: [userId], references: [id])

  @@id([reservationId, userId])
  @@map("reservation_users")
}

model ReservationTransfer {
  id                String         @id @default(uuid())
  reservationId     String         @map("reservation_id")
  fromUserId        String         @map("from_user_id")
  toUserId          String         @map("to_user_id")
  expiresAt         DateTime       @map("expires_at")
  isPrimaryTransfer Boolean        @default(false) @map("is_primary_transfer")
  requestedAt       DateTime       @default(now()) @map("requested_at")
  respondedAt       DateTime?      @map("responded_at")
  spotsToTransfer   String[]       @map("spots_to_transfer")
  status            TransferStatus @default(PENDING)
  fromUser          User           @relation("FromUser", fields: [fromUserId], references: [id])
  reservation       Reservation    @relation(fields: [reservationId], references: [id])
  toUser            User           @relation("ToUser", fields: [toUserId], references: [id])

  @@unique([reservationId, status])
  @@map("reservation_transfers")
}

model DateCapacity {
  date          DateTime      @id
  totalBookings Int           @default(0)
  maxCapacity   Int           @default(60)
  reservations  Reservation[]

  @@map("date_capacities")
}

enum ReservationStatus {
  ACTIVE
  CANCELLED
}

enum ReservationUserStatus {
  ACTIVE
  CANCELLED
}

enum TransferStatus {
  PENDING
  ACCEPTED
  DECLINED
  CANCELLED
  EXPIRED
}
